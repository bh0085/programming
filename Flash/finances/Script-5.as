package physics.objects.oscript{	import physics.PhysObject		public class bounceOffObject extends ObjectScript{				public static var s:Shape				public var objBouncesOff		public var nodesAttached		public var bindingForceConstant = 1		var kOut = 10, kIn = 5, kOn = .05				var bindingMaxDistance = 20		var bindingMaxForceConstant = .002		var bindingMaxVelocity = 400					public var surfaceUnits:Array		public var surfacePoints:Array			public var sfcPtAvg:Array		public var sfcUnitsAvg:Array				public var isInside = false		public var wasInside:Boolean								 function constraint():void{			//var frontAltitude = [objsAttached[0].getX() - surfacePoints[0][0],objsAttached[0].getY() - surfacePoints[0][1]]			//var dot = math.VectorMath2D.dotMultiply2D(frontAltitude,[surfaceUnits[0][2],surfaceUnits[0][3]])			//if(dot <0){				//objsAttached[0].moveAsChildTo([surfacePoints[0][0],surfacePoints[0][1]])			//}					}		 function friction():void{			thisObject.dampenAlong([sfcUnitsAvg[2],sfcUnitsAvg[3]],.8,true)			thisObject.dampenAlong([sfcUnitsAvg[0],sfcUnitsAvg[1]],.8,true)		 }				 function alignWithSurface():void{			 			var node1XY =  nodesAttached[1].thisCtdOutline.nodeExternalCoords(nodesAttached[1])			var node0XY =  nodesAttached[0].thisCtdOutline.nodeExternalCoords(nodesAttached[0])			thisObject.movePtTowardsAboutFixedPt(node1XY,node0XY,surfacePoints[1])		}		public function testDetach():Boolean{			var d = false				if(sfcPtAvg != null){					if(thisObject.mustDetach()){						d = true					thisObject.detachPronto = false					}										var unitUp =[ sfcUnitsAvg[2],sfcUnitsAvg[3]]							var vecTo = [thisObject.getX() - sfcPtAvg[0], thisObject.getY() - sfcPtAvg[1]]					var dotD =VectorMath2D.dotMultiply2D(vecTo,unitUp)					if(dotD > bindingMaxDistance){						//d = true						//trace(dotD,thisObject.getX(),sfcPtAvg[0], "DD")						//trace("TOOOFAR")					}					var v = thisObject.velocity()					dotD = VectorMath2D.dotMultiply2D(v,unitUp)					if(dotD > bindingMaxVelocity) {						d = true					}					var force = thisObject.ftorqueThisTimeStep					var bindForce = bindingMaxForceConstant * thisObject.mass / PhysUniverse.timestep					var dotF =  VectorMath2D.dotMultiply2D(v,unitUp)					if(dotF > bindForce ) {						d = true					}				}else {					d = true					trace("nullDetach")				}						return d		}		public function detach():void{				var detachScript = new detachFromObj				detachScript.setAttachedTo(objAttachedTo)				detachScript.setWhichAttached(nodesAttached)				thisObject.addObjectScript(detachScript, true)				scriptDone = true		}				override public function advance():void{			thisObject.constraint = [objAttachedTo.thisOutline.outline, nodesAttached[0]]				if(objAttachedTo.thisOutline != null){															 surfacePoints = new Array()					 surfaceUnits = new Array()					 sfcPtAvg = [0,0]					 sfcUnitsAvg = [0,0,0,0]					for(var i = 0; i < nodesAttached.length ; i ++){						var outline = objAttachedTo.thisOutline.outline						var pt = nodesAttached[i].thisCtdOutline.nodeExternalCoords(nodesAttached[i])												var surfaceBit = outline.closest(pt)						var localXY = outline.localCoords(pt)						var sfcXY = surfaceBit.ptBitClosest(localXY,true) 						surfacePoints.push(sfcXY)						sfcPtAvg[0] += sfcXY[0]/nodesAttached.length						sfcPtAvg[1] += sfcXY[1]/nodesAttached.length						var sfcUnits = outline.getUnits(surfaceBit)							surfaceUnits.push(sfcUnits)						sfcUnitsAvg = [sfcUnitsAvg[0] + sfcUnits[0],sfcUnitsAvg[1] +sfcUnits[1], sfcUnitsAvg[2] + sfcUnits[2],sfcUnitsAvg[3] + sfcUnits[3]]						 											}					var sfcMag1 = Math.sqrt(Math.pow(sfcUnitsAvg[0], 2) + Math.pow(sfcUnitsAvg[1],2))					sfcUnitsAvg = [sfcUnitsAvg[0] / sfcMag1, sfcUnitsAvg[1]/sfcMag1,-sfcUnitsAvg[1]/sfcMag1,sfcUnitsAvg[0]/sfcMag1]											if(testDetach()){							//trace("DETACHING")							thisObject.constraint = null							detach()						}						if(!scriptDone){							alignWithSurface()							constraint()							friction()						}														}						}		public function setAttachedTo(obj:PhysObject):void{			objAttachedTo = obj			setPriority(1)		}		public function setWhichAttached(nodes:Array):void{			nodesAttached = nodes		}			}}