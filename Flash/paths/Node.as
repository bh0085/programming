package paths{	import math.VectorMath2D	import flash.geom.Rectangle	public class Node {		public var x:Number		public var y:Number		public var firstOf:Array = new Array()		public var lastOf:Array = new Array()		public var prev:Node		public var next:Node		public var address:Array		public var thisCtdOutline:CtdOutline		public var isKink = false		public var oldNode = null		public var isSticky = true		public var nextBig:BigNode				public function Node(thisX:Number, thisY:Number){			x = thisX			y = thisY		}						public function getXY():Array{			return thisCtdOutline.nodeExternalCoords(this)		}		public function getUnitsExt(search:Boolean):Array{			return thisCtdOutline.getUnitsExt(this,search)		}		public function ptBitDistance(localXY:Array):Number{			var seg0 = [x,y]			var seg1 = [next.x,next.y]			return math.VectorMath2D.ptLineDist(localXY,seg0,seg1)[0]		}		public function externalXY():Array{			return thisCtdOutline.nodeExternalCoords(this)		}		public function ptBitClosest(localXY:Array,externalCoords:Boolean):Array{			var seg0 = [x,y]			var seg1 = [next.x,next.y]			var closest = math.VectorMath2D.ptLineClosest(localXY,seg0,seg1)			var closestLocal = [closest[0],closest[1]]			var segEnd = closest[2]			if(externalCoords){				var coord = thisCtdOutline.externalCoords(closestLocal)				coord.push(segEnd)				return coord				} else {					closestLocal.push(segEnd)					return closestLocal}		}				public function ptBitAltitude(localXY:Array):Array{			var seg0 = [x,y]			var seg1 = [next.x,next.y]			var altitude = math.VectorMath2D.ptLineAltitude(localXY,seg0,seg1)						return altitude		}			public function flush():void{			prev.next = next			next.prev = prev			for(var i = 0; i < firstOf.length ; i++){				firstOf[i].setFirst(prev)			}			for(i = 0 ; i < lastOf.length ; i++){				lastOf[i].setLast(next)			}		}		public function bitRectExt():Number{			var pts1 = thisCtdOutline.externalCoords([x,y])			var pts2 = thisCtdOutline.externalCoords([next.x,next.y])			var rect = new Rectangle(Math.min(pts1[0],pts2[0]),Math.min(pts1[1],pts2[1]), Math.abs(pts1[0] - pts2[0]),Math.abs(pts1[1] - pts2[1]))			return rect		}			}	}