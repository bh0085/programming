package physics.fields{	import physics.misc.Multipole	import physics.objects.PhysObject	import physics.PhysUniverse	public class PhysGField extends PhysField{				public static var G = 6.67 * Math.pow(10, -11)	//Gravitational Constant				public function PhysGField() {			super()					}			override public function fieldAt(thisx:Number,thisy:Number):Array{				var gfield:Array = new Array(0,0)			var thisG:Array			for(var i:Number = 0 ; i < thisUniverse.objects.length ; i++){				thisG =  thisUniverse.objects[i].gOfAt([thisx,thisy])				gfield[0] += thisG[0]				gfield[1] += thisG[1]			} return gfield											}		override public function fieldOn(object:PhysObject):Array{			var objindex = object.getUniverseIndex()			var thisx = object.getX()			var thisy = object.getY()			var thisG:Array			var gfield:Array = new Array(0,0)			for(var i:Number = 0 ; i < thisUniverse.objects.length ; i++){				if (i != objindex ) {				thisG =  thisUniverse.objects[i].gOfAt([thisx,thisy])				gfield[0] += thisG[0]				gfield[1] += thisG[1]				} } return gfield					}		override public function forceOn(object:PhysObject):void{						var objindex = object.getUniverseIndex()						var multipole = object.getMultipole()						if(multipole == null){				multipole = new Multipole()				multipole.pushPole(object.getMass(), object.getCharge(), object.getCustomCharges(),[object.getCOMX(),object.getCOMY()])			}						for(var j = 0 ; j < multipole.masses.length ; j++){					var thisXY = multipole.ptsXY[j]					var testMass = multipole.masses[j]					var fNet = [0,0]					for(var i:Number = 0 ; i < thisUniverse.objects.length ; i++){						if(i != objindex){							var thisF =   thisUniverse.objects[i].gOfAt(thisXY)							fNet[0] += thisF[0] * testMass							fNet[1] += thisF[1]	* testMass						}					}					object.exertImpulseAt([fNet[0]* PhysUniverse.timestep,fNet[1] * PhysUniverse.timestep],thisXY)			}								}	}}