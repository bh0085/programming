package physics.fields{		import physics.misc.Multipole	import physics.objects.PhysObject	import physics.PhysUniverse	public class PhysInverseSquareField extends PhysField {				override public function forceOn(object:PhysObject):void{						var objindex = object.getUniverseIndex()						var multipole = object.getMultipole()						if(multipole == null){				multipole = new Multipole()				multipole.pushPole(object.getMass(), object.getCharge(), object.getCustomCharges(),[object.getCOMX(),object.getCOMY()])			}						for(var j = 0 ; j < multipole.masses.length ; j++){					var thisXY = multipole.ptsXY[j]					var testCustomCharge = multipole.customCharges[j][thisUniverseIndex]					var fNet = [0,0]					for(var i:Number = 0 ; i < thisUniverse.objects.length ; i++){						if(i != objindex){							var fieldCustomCharge = thisUniverse.objects[i].getCustomCharge(thisUniverseIndex)							var thisF =  thisUniverse.objects[i].inverseSquareOfAt(thisXY)							fNet[0] += thisF[0] * fieldCustomCharge * testCustomCharge * forceConstant							fNet[1] += thisF[1]	* fieldCustomCharge * testCustomCharge * forceConstant						}					}					var fThis = [fNet[0] * PhysUniverse.timestep,fNet[1] * PhysUniverse.timestep]					object.exertImpulseAt(fThis,thisXY)			}								}	}}