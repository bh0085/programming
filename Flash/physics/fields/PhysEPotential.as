package physics{		import math.VectorMath2D		public class PhysEPotential extends PhysPotential{				public static var eps = 8.845 * Math.pow(10, -12)	//Free Space Permittivity in MKS		public static var kc = 9*Math.pow(10,9)				//Coulomb law K in MKS				public function PhysEPotential() {super()}				override public function valueAt(thisx:Number,thisy:Number,... args):Number{					var idxExclude:Number = -1		if (args.length >= 1) {idxExclude = args[0]}					var epotential:Number = 0			for(var i:Number = 0 ; i < thisUniverse.objects.length ; i++){				if( i != idxExclude ){				var rx:Number =thisx - thisUniverse.objects[i].getPhysicalCenterX()				var ry:Number= thisy - thisUniverse.objects[i].getPhysicalCenterY()				var r:Number = Math.sqrt(Math.pow(rx, 2) + Math.pow(ry,2))				epotential += kc * thisUniverse.objects[i].charge / r 							}			} return epotential											}		override public function potentialOf(object:PhysObject):Number{			var objindex = object.thisUniverseIndex			var epotential: Number = valueAt(object.getX(),object.getY(),objindex)			return epotential					}		override public function forceOn(object:PhysObject):Array{			var objindex = object.thisUniverseIndex			var eforce = VectorMath2D.gradientAtExcluding(this,object.getX(),object.getY(),objindex)			eforce[0] = -1 * eforce[0] ; eforce[1] = -1 * eforce[1]			return eforce					}	}}