package physics.fields{	import physics.objects.PhysObject	import physics.PhysUniverse	public class PhysConstantField extends PhysField{				public static var fx		public static var fy		public static var fconstant = 1		public function PhysConstantField(newfx:Number, newfy:Number) {			super()						fx = newfx			fy = newfy		}		override public function fieldAt(thisx:Number,thisy:Number):Array{				var cfield = [fx * fconstant,fy * fconstant]			return cfield											}		override public function fieldOn(object:PhysObject):Array{			var cfield = [fx * fconstant,fy * fconstant]			return cfield													}		override public function forceOn(object:PhysObject):void{						var force = [fx * object.getMass() * fconstant, fy * object.getMass() * fconstant]			object.exertImpulseOn([force[0] * PhysUniverse.timestep,force[1] * PhysUniverse.timestep])		}				public function setFx(arg:Number){fx = arg}		public function setFy(arg:Number){fy = arg}	}}