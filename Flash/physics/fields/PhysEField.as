package physics.fields{	import physics.misc.Multipole	import physics.objects.PhysObject	import physics.PhysUniverse		public class PhysEField extends PhysField{				public static var eps = 8.845 * Math.pow(10, -12)	//Free Space Permittivity in MKS		public static var kc = 9*Math.pow(10,9)				//Coulomb law K in MKS				override public function fieldAt(thisx:Number,thisy:Number):Array{				var efield:Array = new Array(0,0)			var thisE:Array			for(var i:Number = 0 ; i < thisUniverse.objects.length ; i++){				thisE =  thisUniverse.objects[i].eOfAt([thisx,thisy])				efield[0] += thisE[0]				efield[1] += thisE[1]			} return efield											}		override public function fieldOn(object:PhysObject):Array{			var objindex = object.getUniverseIndex()			var thisx = object.getX()			var thisy = object.getY()			var thisE:Array			var efield:Array = new Array(0,0)			for(var i:Number = 0 ; i < thisUniverse.objects.length ; i++){				if (i != objindex ) {				thisE =  thisUniverse.objects[i].eOfAt([thisx,thisy])				efield[0] += thisE[0]				efield[1] += thisE[1]				} } return efield					}		override public function forceOn(object:PhysObject):void{						var objindex = object.getUniverseIndex()						var multipole = object.getMultipole()						if(multipole == null){				multipole = new Multipole()				multipole.pushPole(object.getMass(), object.getCharge(), object.getCustomCharges(),[object.getCOMX(),object.getCOMY()])			}						for(var j = 0 ; j < multipole.masses.length ; j++){					var thisXY = multipole.ptsXY[j]					var testCharge = multipole.charges[j]					var fNet = [0,0]					for(var i:Number = 0 ; i < thisUniverse.objects.length ; i++){						if(i != objindex){							var thisF =   thisUniverse.objects[i].eOfAt(thisXY)							fNet[0] += thisF[0] * testCharge							fNet[1] += thisF[1]	* testCharge						}					}					object.exertImpulseAt([fNet[0]*PhysUniverse.timestep,fNet[1]*PhysUniverse.timestep],thisXY)			}								}	}}