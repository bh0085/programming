package physics.objects.oscript {	import physics.objects.PhysObject	import physics.pscript.PhysScript	import flash.display.DisplayObject	import flash.utils.getQualifiedClassName		public class ObjectScript extends PhysScript{		public var thisObject:PhysObject		public var objectGraphics:Array				public function setObject(o:PhysObject){			thisObject = o		}					override public function endScriptDefault():void{		if (objectGraphics != null){			for (var i = 0; i < objectGraphics.length ; i++)				thisObject.removeChild(objectGraphics[i])				objectGraphics[i] = null							}			endScript()		}		public function addGraphic(graphic : DisplayObject):void{			if (objectGraphics == null){objectGraphics = new Array}			objectGraphics.push(graphic)			thisObject.addChild(graphic)		}				public function howManyOfThisScript():Number{			var num = 0			for ( var i = 0 ; i< thisObject.scripts.length ; i ++)				{					var className = flash.utils.getQualifiedClassName(thisObject.scripts[i]);					if (className == flash.utils.getQualifiedClassName(this)){num++ }				}			return num		}		public static function howManyInObject(dummyInstance:ObjectScript,object:PhysObject):Number{			var num = 0			for ( var i = 0 ; i< object.scripts.length ; i ++)				{					var className = flash.utils.getQualifiedClassName(object.scripts[i]);					if (className == flash.utils.getQualifiedClassName(dummyInstance)){num++ }				}			return num		}				public static function endAll(dummyInstance:ObjectScript, object:PhysObject):void{			for ( var i = 0 ; i< object.scripts.length ; i ++)				{					var className = flash.utils.getQualifiedClassName(object.scripts[i]);					if (className == flash.utils.getQualifiedClassName(dummyInstance)){							object.scripts[i].scriptDone = true						}				}								}	}}