package physics.objects.oscript{	import physics.PhysUniverse	import physics.PhysObject	import mygraphics.PtObj	import mygraphics.ObjObj		import flash.display.Sprite	import flash.display.BitmapData	import flash.display.Bitmap	import flash.geom.Matrix		import math.VectorMath2D		public class detachFromObj extends ObjectScript{				public static var lastBMP		public static var spriteToSurface 		public var objAttachedTo		public var objsAttached		public var bindingForceConstant = 1				override public function advance():void{					thisObject.detached = true					thisObject.wake()			}		}				public function getSetUnits():void{				var out:Array				for(var j = 0; j< objsAttached.length; j++){											var thisXY = [objsAttached[j].getX(),objsAttached[j].getY()]					var attachedXY = [objAttachedTo.getX(),objAttachedTo.getY()]						out = ObjObj.vectorsToIntersectionWithUnits(thisXY,objsAttached[j].graphic,attachedXY,objAttachedTo.graphic,thisObject.thisUniverse,3,false)					if(out == null){						out = ObjObj.vectorsToIntersectionWithUnits(thisXY,objsAttached[j].graphic,attachedXY,objAttachedTo.graphic,thisObject.thisUniverse,5,false)					}										if(out != null){						objsAttached[j].setSurfaceUnits(out[1])						objsAttached[j].setSurfacePoint(out[0])						objsAttached[j].setIsInsideSurface(out[2])					} else {						objsAttached[j].setSurfaceUnits(null)						objsAttached[j].setSurfacePoint(null)						objsAttached[j].setIsInsideSurface(false)					}				}				if(objsAttached.length >1){					var numAvg = 0					var thisUnits:Array,thisSfcPt:Array,thisCOMRadius:Array					var avgUnits =[0,0],avgSfcPt = [0,0]					for( j = 0; j< objsAttached.length;j++){						if(objsAttached[j].getSurfaceUnits() != null){							numAvg++							thisUnits = objsAttached[j].getSurfaceUnits()							avgUnits[0] += thisUnits[0]							avgUnits[1] += thisUnits[1]								thisSfcPt = objsAttached[j].getSurfacePoint()							thisCOMRadius = objsAttached[j].comRadius()							avgSfcPt[0] += thisSfcPt[0] - thisCOMRadius[0]							avgSfcPt[1] += thisSfcPt[1] - thisCOMRadius[1]						}					}					if(numAvg != 0){						avgSfcPt = [avgSfcPt[0] / numAvg, avgSfcPt[1]/ numAvg]						avgUnits = [avgUnits[0] / numAvg, avgUnits[1]/ numAvg]						thisObject.setSurfaceUnits(avgUnits)						thisObject.setSurfacePoint(avgSfcPt)					} else {						thisObject.setSurfaceUnits(null)						thisObject.setSurfacePoint(null)					}				}					}				public function setAttachedTo(obj:PhysObject):void{			thisObject.attachedTo = obj			objAttachedTo = obj			if(howManyOfThisScript() > 1) {scriptDone = true}			setPriority(1)		}		public function setWhichAttached(objects:Array):void{			objsAttached = objects		}	}}