package physics{	import flash.display.MovieClip	import physics.pscript.UniverseScript	import physics.pscript.PhysScript	import mygraphics.ObjObj	import physics.objects.PhysObject	import physics.fields.*	import flash.utils.getTimer	import math.graphs.MovingGraph	import flash.display.Sprite		public class PhysUniverse extends MovieClip{		public var thisstage:PhysSuper				public var objects= new Array(), fields= new Array(), customChargeFields = new Array(), walls = new Array(), potentials = new Array(), scripts = new Array()		public var xvel = 0,  yvel = 0		public var universeMove = true		public var fieldIsGravity = -1, fieldIsElectric = -1		public static var toggleDebug = false		public static var toggleGraphics = false		public static var timestep:Number =1 / 20		public static var universe		public  var plotter:MovingGraph		var extraGraphics:Sprite				public var drawBoxes = new Array()		public var drawCurrent				public function wSet(winIDX){			if(drawBoxes[winIDX] == null){				drawBoxes[winIDX] = new Sprite()				addChild(drawBoxes[winIDX])			}			drawCurrent = winIDX		}		public function wClear(){			if(drawBoxes[drawCurrent] != null){				removeChild(drawBoxes[drawCurrent])				drawBoxes[drawCurrent] = new Sprite()				addChild(drawBoxes[drawCurrent])			}		}		public function wAdd(newChild:Sprite){			drawBoxes[drawCurrent].addChild(newChild)		}		public function wDraw(newSprite:Sprite){			wClear()			wAdd(newSprite)		}		public function wAffine(txy:Array, zoom:Number){			drawBoxes[drawCurrent].x = txy[0]			drawBoxes[drawCurrent].y = txy[1]			drawBoxes[drawCurrent].scaleX = zoom			drawBoxes[drawCurrent].scaleY = zoom		}				public function setSuper(thisSuper:PhysSuper):void{			universe = this			thisstage = thisSuper				plotter = new MovingGraph()				thisstage.addChild(plotter)				plotter.setSize([200,200])				plotter.x =300				plotter.y = 250		}		public function setExtraGraphics(s:Sprite):void{			if(extraGraphics!= null){				removeChild(extraGraphics)			}			extraGraphics = s			addChild(extraGraphics)		}		public function addExtraGraphic(s:Sprite,...args):void{			if(args.length == 0){var atRight = false} else {atRight = args[0]}			if(extraGraphics == null){				setExtraGraphics(  new Sprite() )			}			if(atRight){s.x += extraGraphics.width}			extraGraphics.addChild(s)		}		public function clearExtraGraphics():void{			setExtraGraphics(new Sprite())		}		public function timeStep():void{			if(toggleDebug){				var n = 5 + 5			}			plotter.clean()									for(i = 0 ; i <objects.length ; i++){objects[i].timeStep1()}			for(i = 0; i < objects.length ; i++){objects[i].executeScripts(0)}						for(i = 0; i < objects.length ; i++){objects[i].executeScripts(1)}						executeScripts(0)			if (universeMove)			{						xvel *=.25				yvel *=.25						x  += xvel * timestep				y  += yvel * timestep			}						for(i = 0 ; i <objects.length ; i++){objects[i].timeStep2()}						for(var k= 0; k < objects.length; k++){				for( var l = 0; l < k ; l ++){					PhysObject.collision(objects[k],objects[l])				}			}						for( i = 0; i <objects.length ; i++){objects[i].executeScripts(2)}			executeScripts(1)			for(var i = 0 ; i < objects.length ; i++){objects[i].updateGraphics()}			}		public function executeScripts(priority:Number):void{			if  (scripts.length != 0){				for ( var i = 0 ; i< (scripts.length) ;i ++){						if (scripts[i].advanceDefault(priority)){						scripts[i].endScriptDefault()						scripts.splice(i,1)						i--}}				}								}				public function setCustomChargeFieldToGravity(fieldIDX:Number):void{			for(var i = 0; i<objects.length;i++){					objects[i].setCustomCharge(fieldIDX,objects[i].getMass())							}			fieldIsGravity = fieldIDX		}		public function setCustomChargeFieldToElectric(fieldIDX:Number):void{			for(var i = 0; i<objects.length;i++){					objects[i].setCustomCharge(fieldIDX,objects[i].getCharge())							}			fieldIsElectric = fieldIDX		}						public function addScript(script:PhysScript):void{scripts.push(script)}		public function addUniverseScript(script:UniverseScript):void{			addScript(script)			script.setUniverse(this)			script.beginScript()		}				public function pushObjAndDisplay(physObject:PhysObject):void{			pushObj(physObject)			addChild(physObject)		}		public function pushObj(physobject:PhysObject):void {			physobject.setUniverse(this,objects.length)			objects.push(physobject)		}				public function pushField(physfield:PhysField):void {			var l = fields.length			fields.push(physfield)			physfield.thisUniverse = this			physfield.thisUniverseIndex = l		}		public function pushCustomChargeField(physfield:PhysField):void{			var l = customChargeFields.length			customChargeFields.push(physfield)			physfield.thisUniverse = this			physfield.thisUniverseIndex = l		}		public function removeObj(index:Number):void {			objects.splice(index,1)			for (var i:Number = index ; i < objects.length; i++){				objects[i].thisUniverseIndex --			}		}		public function removeField(index:Number):void {			fields.splice(index,1)			for (var i:Number = index ; i < fields.length; i++){				fields[i].thisUniverseIndex --			}		}		public function removePotential(index:Number):void {			potentials.splice(index,1)			for (var i:Number = index ; i < potentials.length; i++){				potentials[i].thisindex --			}		}		public function removeWall(index:Number):void{			walls.splice(index,1)			for (var i:Number = index ; i < walls.length; i++){				walls[i].thisindex --			}					}	}}