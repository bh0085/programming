package tanks.planets{	import paths.PhysOutline	import paths.CtdOutline	import paths.Node		import physics.objects.UniformDensityObject		import flash.display.Shape	import mygraphics.Obj		import flash.display.BitmapData		import flash.display.DisplayObject	import flash.display.DisplayObjectContainer		import flash.display.Bitmap	import flash.display.Sprite	import flash.utils.ByteArray	import flash.geom.Rectangle	import flash.geom.ColorTransform	import flash.display.InterpolationMethod	import flash.geom.Matrix	import flash.display.BlendMode	import flash.display.MovieClip		import flash.utils.getTimer	import math.VectorMath2D			public class Planet extends UniformDensityObject{		var radius:Number		public static var graphicCopy:Shape		public static var sprite1:Sprite				public function Planet(...args){		objectCanBeAttachedTo = true		objectCanAttach = false		objectCanStick = true		objectIsSticky = true						var d:Number			if(args.length >0){radius =  args[0]} else {radius  = 300 + Math.random() * 100}			if(args.length >1){d = args[1]} else {d = 3}			if(args.length >2){color =   args[2]} else {color   = Math.random() * 256 + Math.random() *Math.pow(256,2) + Math.random() * Math.pow(256,3)}						thisOutline = PhysOutline.sphereOutline(radius,10)			thisOutline.setObject(this)			var gfx = thisOutline.drawShape(1,0xCCCCCC,color,false)			setGfxMask(gfx)			gfx = thisOutline.drawShape(1,0xCCCCCC,color,false)			setGraphic(gfx)			thisOutline.outline.genOrientation()			thisOutline.outline.genOrientation()						setVolume(4/ 3 * Math.PI * Math.pow(radius,3))			setDensity(d)						setDefaultMass()			eraseable = true		}	}}