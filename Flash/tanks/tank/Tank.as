package tanks.tank{		import tanks.tank.tankscripts.tChargeScript	import tanks.scripts.ExplScript	import tanks.explosions.*	import tanks.projectiles.*	import tanks.explosions.StandardExplosion	import flash.display.MovieClip	import physics.PhysUniverse	import tanks.tank.tankscripts.TankScript	import flash.display.Sprite	import math.MathArray	import math.VectorMath2D	import flash.events.Event	import flash.events.MouseEvent		import flash.utils.getTimer		public class Tank extends TankBaseObj{				static var moveStep = 5		static var turnStep = 5				public var uniCenter = false				var fireTimer:Number		var chargingTurret:Boolean= false						var turnedLeft:Boolean = false		var turret:Turret		public var rectMask:Sprite		var myPic:MovieClip		var thisExhaust:Exhaust		public var wT:MovieClip				public function Tank(wholeTank:MovieClip){			objectCanAttach = true			turret = new Turret()			myPic = wholeTank						wT = wholeTank									wholeTank.y-= 10			addChild(wholeTank)			addChild(turret)			var tfill = new TurretFill()			turret.addChild(tfill)			rectMask = new Sprite			rectMask.graphics.beginFill(0x0000FF)			rectMask.graphics.drawRect(0,0,20,50)			turret.addChild(rectMask)			rectMask.x = 75			rectMask.y = -25			rectMask.width = 0			tfill.mask = rectMask						setAttachMass(5000)									turret.x -= 5			turret.y -= 50			addEventListener(Event.ENTER_FRAME, tankEnterFrame)			addEventListener(MouseEvent.MOUSE_DOWN,tankMouseDown)			addEventListener(MouseEvent.MOUSE_UP,tankMouseUp)					}				public function getExhaustX(){			return (getX() + Math.cos(angle) * -30 - Math.sin(angle) * -5)					}		public function getExhaustY(){			return (getY() + Math.cos(angle) * -5 + Math.sin(angle) * -30)					}				public function getFiringX():Number{			return (getX() + Math.cos(angle) * turret.x - Math.sin(angle) * turret.y + 200* Math.cos(angle + turret.rotation * Math.PI / 180))		}		public function getFiringY():Number{			return (getY() + Math.cos(angle) * turret.y + Math.sin(angle) * turret.x + 200* Math.sin(angle + turret.rotation * Math.PI / 180))		}		public function getFiringAngle():Number{			return (angle + turret.rotation * Math.PI / 180)		}				public function addTankScript(script:TankScript):void{			script.setTank(this)			addScript(script)		}				public function chargeTurret(type:Number){			var script = new tChargeScript()			if(type == 1){				var proj = new Bomb()				var expl = new FragmentExplosion()			} else {				proj = new Bomb()				expl = new StandardExplosion()			}			script.setProjectile(proj)			script.setExplosion(expl)			addTankScript(script)		}				function tankMouseDown(event:MouseEvent):void{			thisUniverse.universeMove = !thisUniverse.universeMove		}		function tankMouseUp(event:MouseEvent):void{		}				function tankEnterFrame(event:Event):void {			if (thisUniverse.universeMove ){centerUniverseOnThis()}								}				public function centerUniverseOnThis(){			if (!dragging){				var targetx = (-1 * (x - 50))* thisUniverse.scaleX + 300				var targety = (-1 * (y - 50))* thisUniverse.scaleY + 300				var dispx = thisUniverse.x - targetx				var dispy = thisUniverse.y - targety				var uk = 20				var impulsex= (-1 * dispx) * uk /PhysUniverse.timestep				var impulsey= (-1 * dispy) * uk /PhysUniverse.timestep				thisUniverse.xvel += impulsex *PhysUniverse.timestep				thisUniverse.yvel += impulsey *PhysUniverse.timestep			}		}				public function thrustForward(k:Number):void{			if(isAttached()){				k*=2			} else {				k*=1			}			var v = getVel()			var vx = v[0]			var impulse:Number			var vdot = VectorMath2D.dotMultiply2D([Math.cos(angle),Math.sin(angle)],getVel())			if  (vdot < 50 / PhysUniverse.timestep){				impulse = -1 * (( vdot - 50/PhysUniverse.timestep)/5) * getMass() * k				exertImpulseOn([impulse * Math.cos(angle), impulse * Math.sin(angle)])				Exhaust.addPuff([getExhaustX(),getExhaustY()])			}		}		public function thrustBackward(k:Number):void{			if(isAttached()){				k *= 2			} else {				k *= 1			}			var v = getVel()			var vx = v[0]			var impulse:Number			var vdot = VectorMath2D.dotMultiply2D([Math.cos(angle + Math.PI),Math.sin(angle + Math.PI)],getVel())			if  (vdot < 50 / PhysUniverse.timestep){				impulse = -1 * (( vdot - 50/PhysUniverse.timestep)/5) * getMass() * k				exertImpulseOn([impulse * Math.cos(angle + Math.PI), impulse * Math.sin(angle + Math.PI)])				Exhaust.addPuff([getExhaustX(),getExhaustY()],0xBB3333)			}		}				public function thrustUpwards(k:Number):void{			    var up = unitUp()				var impulse = [getMass() * k * up[0],getMass() * k *up[1]]				exertImpulseOn(impulse)				Exhaust.addPuff([getExhaustX(),getExhaustY()])		}				public function torqueThrust(k:Number):void{				exertTorqueImpulseOn([0,0,getMomentOfInertia() * k])				Exhaust.addPuff([getExhaustX(),getExhaustY()],0x33BB33)		}				public function cancelMotion():void{			dampen([.3,.3,.2])		}				public function rotateTurret(angle:Number):void{ turret.rotation += angle }					public function triggerExplosion(expXY:Array,rotateDegrees:Number){			var thisExplosion = new ExpMC2()			thisExplosion.scaleX = .6			thisExplosion.scaleY = .6			thisExplosion.alpha = .1			thisUniverse.addChild(thisExplosion)			thisExplosion.x = expXY[0]			thisExplosion.y = expXY[1]					}		}		}