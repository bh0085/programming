package physics{	import flash.display.Shape	import flash.display.Graphics	import math.VectorMath2D	import flash.display.Sprite	import flash.display.DisplayObject		public class PhysWallInelastic extends Sprite {		public var xcoord:Array;		public var ycoord:Array;				public var thisuniverseindex:Number;				public var thisuniverse:PhysUniverse;				public var segments:Array		public var color = 0x000000				public function PhysWall(xs:Array,ys:Array, ... args){			if (args.length >= 1) (color = args[0])			xcoord = xs			ycoord = ys						segments = new Array()									for (var i:Number = 0 ; i<xcoord.length - 1 ; i++){				segments.push( new PhysWallSegment([xcoord[i],ycoord[i]],[xcoord[i+1],ycoord[i+1]], args))				addChild(segments[i])   			}		}				public function hitTestSegments(obj:DisplayObject):Number{			var indexhit = -1			for (var i:Number = 0 ; i < segments.length ; i++){								var intersection = PhysCollisions.physHitTestIrregular(obj, segments[i],thisuniverse.thisstage) 				if ((intersection != null)) {					indexhit = i}						}			return indexhit		}				public function wallGetUnits(segIdx):Array{						var seg0 = [xcoord[segIdx],ycoord[segIdx]]			var seg1 = [xcoord[segIdx + 1],ycoord[segIdx + 1]]			var sl = Math.sqrt(Math.pow(seg0[0] - seg1[0],2) + Math.pow(seg0[1] - seg1[1],2))			var unitpar = [(seg1[0] - seg0[0]) / sl,  (seg1[1] - seg0[1]) / sl]			var unitperp =[-unitpar[1], unitpar[0]]				return [unitpar[0],unitpar[1],unitperp[0],unitperp[1]]		}						public function wallGetClosestSegment(object:PhysObject):Number{			var mindistance:Number ; var thisdistance:Number ; var minidx:Number			var pt = [object.xcenter,object.ycenter]				for(var i:Number = 0; i <( xcoord.length - 1) ; i++){				    thisdistance = VectorMath2D.ptLineDist(pt,[xcoord[i],ycoord[i]],[xcoord[i+1],ycoord[i+1]])					if (i == 0) { 						 mindistance = thisdistance						 minidx = i					} else { if ( thisdistance < mindistance ) {						mindistance = thisdistance						minidx = i}					}				}				return minidx		}						public function collision(object:PhysObject, ... idxhit ):void{			var minidx:Number			if (idxhit.length == 0){ minidx = wallGetClosestSegment(object)} else{ minidx = idxhit[0]}							var units = wallGetUnits(minidx)			var unitpar = units.slice(0,2)			var unitperp = units.slice(2)											var velpar = VectorMath2D.dotMultiply2d(unitpar, [object.xvel, object.yvel])			var velperp= VectorMath2D.dotMultiply2d(unitperp,[object.xvel, object.yvel])						velperp = -1 * velperp * .5									object.xvel = unitpar[0] * velpar + unitperp[0] * velperp			object.yvel = unitpar[1] * velpar + unitperp[1] * velperp								}			}}