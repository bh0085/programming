package math.graphs{	import flash.display.Sprite	import flash.geom.Rectangle	import flash.utils.getTimer	import flash.events.MouseEvent	public class MovingGraph extends Sprite{		public var accepting = true		public var plots = new Array()		var axisMask:Sprite		var bg:Sprite		public var axis:Sprite		public var funcs:Sprite		public var bounds:Rectangle		public var sX = 10		public var sY = 1		public var timeCreated:Number		public var range = new Rectangle(-200,-200,400,400)		public var axisCenter = [0,0]		public var pushRange = true		var axisYesNo = false		var stretchYToFit = true				public function setYFlipped(flip:Boolean):void{			if(flip){scaleY = -1} else { scaleY = +1}		}				public function MovingGraph():void{			timeCreated =   flash.utils.getTimer()			bounds = new Rectangle(0,0,200,200)			bg = new Sprite()			bg.graphics.beginFill(0xFFFFFF,.3)			bg.graphics.lineStyle(0,0x000000,.8)			bg.graphics.drawRect(bounds.x,bounds.y,bounds.width,bounds.height)			var funcMask = new Sprite()			funcMask.graphics.beginFill(0x000000)			funcMask.graphics.drawRect(bounds.x,bounds.y,bounds.width,bounds.height)			axisMask = new Sprite()			axisMask.graphics.beginFill(0x000000)			axisMask.graphics.drawRect(bounds.x,bounds.y,bounds.width,bounds.height)			funcs = new Sprite()			funcs.mask = funcMask						addChild(bg)			if(axisYesNo){addChild(axisMask)}			if(axisYesNo){drawAxis(axisCenter)}			addChild(funcMask)			addChild(funcs)			funcs.scaleX = sX			funcs.scaleY = sY			addEventListener(MouseEvent.MOUSE_DOWN,mDown)			addEventListener(MouseEvent.MOUSE_UP,mUp)			scaleY = -1		}		public function mDown(e:MouseEvent):void{			 startDrag()		}				public function mUp(e:MouseEvent):void{			 stopDrag()		}		public function refresh():void{			bg.height = bounds.height			bg.width = bounds.width			sX =(bounds.width ) /( range.width)			sY =(bounds.height) /(range.height)			var xOff = -range.x * sX			var yOff = -range.y * sY			var axisPts = [xOff + axisCenter[0] * sX,yOff + axisCenter[1] * sY]			if(axisYesNo){drawAxis(axisPts)}			funcs.scaleX = sX			funcs.scaleY = sY			funcs.x = xOff			funcs.y = yOff			if(stretchYToFit){scalePlots()}					}		public function scalePlots():void{			for(var i = 0 ; i < plots.length; i ++){				var plot = plots[i]				if(plot.scaleMe){					plot.fitY([range.y,range.y + range.height], 20)				} else {					plot.resetY()				}							}		}		public function drawAxis(axisXY){			var realXY = axisXY			if(axis != null){removeChild(axis)}			axis = new Sprite()			axis.graphics.lineStyle(0,0x000000,.3)			axis.graphics.moveTo(realXY[0],bounds.y)			axis.graphics.lineTo(realXY[0],bounds.y + bounds.height)			axis.graphics.moveTo(bounds.x,realXY[1])			axis.graphics.lineTo(bounds.x + bounds.width, realXY[1])			addChild(axis)			axis.mask = axisMask		}				public function pushY(yVal,plotName:String,...args){			if(args.length > 0){var color = args[0]} else { color = 0x000000 }			if(args.length > 1){var scaleMe = args[1]} else {scaleMe = false}			var xDefault = flash.utils.getTimer() / 1000 - timeCreated/1000			pushPt([xDefault,yVal],plotName,color,scaleMe)		}				public function pushPt(ptXY:Array,plotName:String,...args){			if(accepting){			if(args.length > 1){var scaleMe = args[1]} else {scaleMe = false}			if(args.length > 0){var color = args[0]} else { color = 0x000000 }			var names = new Array()					for(var i = 0 ; i < plots.length ; i++){				names.push(plots[i].n)			}			var whichPlot = names.lastIndexOf(plotName)			if(whichPlot == -1){				var plot = new Plot()				plot.n = plotName				plot.pushPt(ptXY,color,scaleMe)				plots.push(plot)				funcs.addChild(plot)			} else {				plot = plots[whichPlot]				plot.pushPt(ptXY,color,scaleMe)			}			setXRange([ptXY[0] - 10,ptXY[0] + 10])			if(pushRange){				if(ptXY[1] > range.y + range.height){					setYRange([range.y, ptXY[1] + 10])				}				if(ptXY[1] < range.y){					setYRange([range.y,range.y + range.height])				}			}			}					}		public function pushPtFixedRange(ptXY:Array,plotName:String, ...args){			if(args.length > 0){var newRange = args[0]} else { newRange = null }			if(args.length > 1){var color = args[1]} else { color = 0x000000 }			if(args.length > 2){var thick = args[2]} else { thick = 0 }						var names = new Array()					for(var i = 0 ; i < plots.length ; i++){				names.push(plots[i].n)			}			var whichPlot = names.lastIndexOf(plotName)			if(whichPlot == -1){				var plot = new Plot()				plot.n = plotName				plot.pushPt(ptXY,color,false,thick)				plots.push(plot)				funcs.addChild(plot)			} else {				plot = plots[whichPlot]				plot.pushPt(ptXY,color,false,thick)			}			if(newRange != null){				try{					setRange(newRange)							} catch (e:Error) {					trace(e)					setRange(new Rectangle(-newRange,-newRange,newRange*2,newRange*2))				}			}														}		public function pushScatterPt(ptXY:Array,plotName:String,...args){			if(args.length > 0){var newRange = args[0]} else { newRange = null }			if(args.length > 1){var color = args[1]} else { color = 0x000000 }						if(args.length > 2){var thick = args[2]} else { thick = 1 }						var names = new Array()					for(var i = 0 ; i < plots.length ; i++){				names.push(plots[i].n)			}			var whichPlot = names.lastIndexOf(plotName)			if(whichPlot == -1){				var plot = new Plot()				plot.n = plotName				plot.pushScatterPt(ptXY,color,false,thick)				plots.push(plot)				funcs.addChild(plot)			} else {				plot = plots[whichPlot]				plot.pushScatterPt(ptXY,color,false,thick)			}			if(newRange != null){				try{					setRange(newRange)							} catch (e:Error) {					setRange(new Rectangle(-newRange,-newRange,newRange*2,newRange*2))				}			}					}		public function clean():void{			for(var i = 0; i < plots.length ; i++){				if(plots[i].age() > 10000){					funcs.removeChild(plots[i])					plots.splice(i,1)					i--				}							}		}		public function setRange(newRange:Rectangle):void{			range = newRange			refresh()		}		public function setYRange(rangeY:Array){			range.y = rangeY[0]			range.height = rangeY[1] - rangeY[0]			refresh()		}		public function setXRange(rangeX:Array){			range.x = rangeX[0]			range.width = rangeX[1] - rangeX[0]			refresh()		}		public function setSize(wh:Array):void{			bounds.width = wh[0]			bounds.height = wh[1]			refresh()		}				}}