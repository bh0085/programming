package math.graphs{	import flash.display.Sprite	import flash.utils.getTimer	public class Plot extends Sprite{		public var xVals = new Array()		public var yVals = new Array()		public var scatter = new Array()		public var colors = new Array()		public var thicks = new Array()		public var n = "blank"		public var color		public var lastModified = flash.utils.getTimer()		public var scaleMe = false		public var defaultLength = 100				public function pushPt(ptXY,...args){			if(args.length == 0){color = 0x000000} else {color = args[0]}			if(args.length > 1){ scaleMe = args[1]}			if(args.length > 2){var  thick = args[2]} else {thick = 0}						colors.push(color)			scatter.push(false)			xVals.push(ptXY[0])			yVals.push(ptXY[1])			thicks.push(thick)			draw()			lastModified = flash.utils.getTimer()		}		public function pushScatterPt(ptXY,...args){			if(args.length == 0){color = 0x000000} else {color = args[0]}			if(args.length > 1){ scaleMe = args[1]}			if(args.length > 2){var  thick = args[2]} else {thick = 2}						colors.push(color)			scatter.push(true)			xVals.push(ptXY[0])			yVals.push(ptXY[1])			thicks.push(thick)			draw()			lastModified = flash.utils.getTimer()		}		public function draw():void{			graphics.clear()			graphics.lineStyle(1)			var l = xVals.length			for(var i = 0; i<l ; i++){				var idx = xVals.length - 1 - i				if(idx >=0){					if(i<defaultLength){						var opacity = i / 20						if(scatter[idx]){							graphics.lineStyle(thicks[idx],colors[idx],opacity)							graphics.moveTo(xVals[idx]-.1,yVals[idx])							graphics.lineTo(xVals[idx],yVals[idx])						} else {							if(idx - 1 >0 && ! scatter[idx - 1]){								graphics.lineStyle(thicks[idx],colors[idx],opacity)								graphics.moveTo(xVals[idx-1],yVals[idx-1])								graphics.lineTo(xVals[idx],yVals[idx])							}						}											} else {						removePt(idx)											}				}			}		}		public function removePt(idx:Number){			colors.splice(idx,1)			scatter.splice(idx,1)			xVals.splice(idx,1)			yVals.splice(idx,1)			thicks.splice(idx,1)		}		public function age():Number{			return flash.utils.getTimer() - lastModified		}		public function fitY(yRange:Array,memory:Number):void{			var yMin = 0			var yMax = 0			for(var i = 0; i < memory ; i++){				var idx = yVals.length - 1 - i				if(idx >0){					if(i == 0 || yVals[idx] >yMax){yMax = yVals[idx]}					if(i == 0 || yVals[idx] <yMin){yMin = yVals[idx]}				}			}			var abs = Math.max(Math.abs(yMax),Math.abs(yMin)) + 1			var scale = (yRange[1] - yRange[0])/((2 * abs)  ) 			scaleY = scale			y = yRange[0] + (yRange[1] - yRange[0]) /2					}		public function resetY():void{			scaleY = 1			y = 0		}	}}