package actionscript{	import flash.display.MovieClip	import flash.display.Sprite	import flash.display.Shape	import flash.text.TextField	import flash.text.TextFormat	import flash.events.MouseEvent	import flash.geom.Rectangle	public class GloobalMain extends MovieClip{		var selected		var mouseOver:Sprite		var infoPane:Sprite = new Sprite()		var countryPane:Sprite = new Sprite()		var pathOverlay:Sprite = new Sprite()		var scl = [.2,.2]		var geo:Sprite =  new Sprite()		var arrivalType: String = "Country"		var departureType:String = "Country"		var prompts = new Sprite()		var geoXY = [100,200]				var customRect:Rectangle		var customRectGfx: Sprite		var customStartXY:Array				static var mainRes = [550,400]		public static var main		//drawing parameters		static var colorMode = "fare"		static var colorationLevel = "Country"		static var smallestNumber = 10000				public function GloobalMain():void{			main = this			createCountries()						geo.graphics.beginFill(0xAAAAFF)			geo.graphics.drawRect(-5000,-5000,10000,10000)						selected = Country.countries[0]			geo.addChild(countryPane)			geo.addChild(infoPane)			geo.addChild(pathOverlay)						addChild(geo)			var t1 = new Toolbar1()			t1.x = mainRes[0] - t1.width - 10			t1.y = mainRes[1] - t1.height - 10			addChild(t1)			drawInfo()			drawCountries()			geo.scaleX = scl[1]			geo.scaleY = scl[0]			geo.x = geoXY[0]			geo.y = geoXY[1]			prompts.mouseEnabled = false			prompts.mouseChildren = false			infoPane.mouseEnabled = false			infoPane.mouseChildren = false			addChild(prompts)			generatePrompt()		}		public function geoCoords(stageCoord:Array):Array{			return([(stageCoord[0] - geoXY[0]) /scl[0],(stageCoord[1] - geoXY[1]) /scl[1]])		}		public function stageCoords(geoCoord:Array):Array{			return([(geoCoord[0]*scl[0]) + geoXY[0],(geoCoord[1] *scl[1]) + geoXY[1]])		}		public function createCountries():void{			var USA = new Country("USA")			USA.setLatLon([300,-300])			USA.genRandomPoly(500)			USA.pushCity("NYC",10000000,[500,-200])			USA.pushCity("Houston",2000000,[100,100])			USA.pushCity("LA",8000000,[-100,0])			var Peru = new Country("Peru")			Peru.setLatLon([0,970])			Peru.genRandomPoly(300)			Peru.pushCity("Lima",1000000,[-20,850])			Peru.pushCity("Cusco",500000,[0,1200])			var Brazil = new Country("Brazil")			Brazil.setLatLon([400,700])			Brazil.genRandomPoly(300)			Brazil.pushCity("Corcovado",1000000,[600,700])			var Ecuador = new Country("Ecuador")			Ecuador.setLatLon([-30,550])			Ecuador.genRandomPoly(150)			Ecuador.pushCity("Quito",500000,[-45,400])			Ecuador.pushCity("Loja",200000,[-20,500])			var UK = new Country("UK")			UK.setLatLon([2000,0])			UK.genRandomPoly(150)			UK.pushCity("London",8000000,[2100,100])			var NA = new Continent("North America")			var SA = new Continent("South America")			var Europe = new Continent("Europe")			NA.setLatLon(USA.getXY())			SA.setLatLon([0,800])			Europe.setLatLon([2200,200])			NA.pushCountry(USA)			SA.pushCountry(Brazil)			SA.pushCountry(Peru)			SA.pushCountry(Ecuador)			Europe.pushCountry(UK)					}		public function generatePrompt():void{			switch (departureType){				case "City": var string = "Choose a departure City" ; break;				case "Country": string = "Choose a departure Country" ; break;				case "Continent":string = "Choose a departure Continent" ; break;				case "Custom":string = "Click to draw a rectangle containing departure cities" ; break;			}			var search = true			while(search){				try{prompts.removeChildAt(0)} catch (e:Error) {search = false}			}			var prompt = new TextField()			var f = new DefaultFont			var tF = new TextFormat(f.fontName,30,0xFFFFFF)			prompt.embedFonts = true			prompt.autoSize = 'right'			prompt.x = mainRes[0] - prompt.width			prompt.selectable = false			prompt.defaultTextFormat = tF			prompt.text = string			prompt.alpha = 1			prompt.height = 35			prompts.addChild(prompt)							}		public function drawInfo():void{			switch(arrivalType){				case "Continent":var arr = Continent.continents; break ;				case "City":arr = City.cities; break;				case "Country":arr = Country.countries ; break;				default:			}			var remove = true			while(remove){				try{infoPane.removeChildAt(0)} catch (e:Error) {remove = false}			}			Continent.resetFairs()			Country.resetFairs()			City.resetFairs()			Fares.resetMax()			for(var i = 0 ;i < arr.length ; i++){				infoPane.addChild(arr[i].drawInfo(selected,scl))			}		}		public function drawCountries():void{			var search = true			while(search){				try{countryPane.removeChildAt(0)} catch (e:Error) {search = false}			}			var continents = Continent.continents			for(var i = 0 ; i < continents.length ; i ++){				countryPane.addChild(continents[i].draw())			}		}		public function clearPaths():void{			var search = true			while(search){				try{pathOverlay.removeChildAt(0)} catch (e:Error){search = false}			}		}		public function drawPath(p1:GlooPlace , p2: GlooPlace){			var s = new Sprite()			s.graphics.moveTo(p1.getXY()[0],p1.getXY()[1])			s.graphics.lineStyle(25,0xFFFFFF,.3)			s.graphics.lineTo(p2.getXY()[0],p2.getXY()[1])			pathOverlay.addChild(s)		}		public function setDepartureType(type:String):void{			departureType = type			switch(type){				case "City":					switch(selected.getType()){						case "City": break;						case "Country": selected = selected.cities[0] ;break;						case "Continent": selected = selected.countries[0].cities[0]; break;						case "Custom": selected = selected.cities[0]; break;					} ; break;				case "Country":					switch(selected.getType()){						case "City": selected = selected.p; break;						case "Country": break;						case "Continent": selected = selected.countries[0]; break;						case "Custom": selected = selected.cities[0].p; break;					} ; break;				case "Continent":					switch(selected.getType()){						case "City": selected = selected.p.p; break;						case "Country": selected = selected.p; break;						case "Continent": break;						case "Custom": selected = selected.cities[0].p.p; break;					} ; break;								case "Custom":					geo.addEventListener(MouseEvent.MOUSE_DOWN,customStartSelect) ; break;			}			drawInfo()			drawCountries()			generatePrompt()		}		public function customStartSelect(ev:MouseEvent){			geo.removeEventListener(MouseEvent.MOUSE_DOWN,customStartSelect)			if(departureType == "Custom"){				geo.addEventListener(MouseEvent.MOUSE_MOVE, customSelectMove)				geo.addEventListener(MouseEvent.MOUSE_UP, customSelectUp)				customStartXY = geoCoords([ev.stageX,ev.stageY])			}		}		public function customSelectMove(ev:MouseEvent){			var stageXY = geoCoords([ev.stageX,ev.stageY])			var rectX = Math.min(customStartXY[0],stageXY[0])			var rectY = Math.min(customStartXY[1],stageXY[1])			var rectW = Math.abs(customStartXY[0] - stageXY[0])			var rectH = Math.abs(customStartXY[1] - stageXY[1])			var customRect = new Rectangle( rectX, rectY, rectW, rectH)						if(customRectGfx != null){				try{removeChild(customRectGfx)}				catch(e:Error){}			}			customRectGfx = new Sprite()			customRectGfx.graphics.beginFill(0xFFFFFF,.2)			customRectGfx.mouseEnabled = false			var rectXY = stageCoords([rectX,rectY])			var rectRightBottom = stageCoords([customRect.right,customRect.bottom])			customRectGfx.graphics.drawRect(rectXY[0],rectXY[1],rectRightBottom[0]- rectXY[0],rectRightBottom[1] - rectXY[1])			addChild(customRectGfx)		}		public function customSelectUp(ev:MouseEvent){			var stageXY = geoCoords([ev.stageX,ev.stageY])			var rectX = Math.min(customStartXY[0],stageXY[0])			var rectY = Math.min(customStartXY[1],stageXY[1])			var rectW = Math.abs(customStartXY[0] - stageXY[0])			var rectH = Math.abs(customStartXY[1] - stageXY[1])			var customRect = new Rectangle( rectX, rectY, rectW, rectH)			var region = new RectangularRegion(customRect)			region.findCities()			selected = region			drawInfo()			drawCountries()			geo.removeEventListener(MouseEvent.MOUSE_MOVE, customSelectMove)			geo.removeEventListener(MouseEvent.MOUSE_UP, customSelectUp)			geo.addEventListener(MouseEvent.MOUSE_DOWN,customStartSelect)			if(customRectGfx != null){				try{removeChild(customRectGfx)}				catch(e:Error){}			}					}		public function setArrivalType(type:String):void{			trace("settingArrival")			arrivalType = type			colorationLevel = type			drawInfo()			drawCountries()					}		public function countryMouseOver(c:Country):void{			if(mouseOver != null){geo.removeChild(mouseOver)}			mouseOver = c.returnPoly(true,false,50,0xFFFFFF)			mouseOver.mouseEnabled = false			mouseOver.alpha = .6			geo.addChild(mouseOver)		}		public function countryMouseExit(c:Country):void{			geo.removeChild(mouseOver)			mouseOver = null		}		public function countryMouseClick(c:Country, ev:MouseEvent):void{			switch(departureType){				case "Country": selected = c; break;				case "Continent": selected = c.p; break;				case "City": selected = findSelected(c,ev)			}			drawInfo()			drawCountries()		}		public function findSelected(c:Country,ev:MouseEvent):City{			var g = geoCoords([ev.stageX,ev.stageY])			var cities = c.cities			var minCity = null			var minDist = -1			for(var i = 0 ; i < cities.length ; i++){				var dist = Math.sqrt(Math.pow(g[0] - cities[i].getXY()[0],2) + Math.pow( g[1] - cities[i].getXY()[1], 2))				trace(dist)				if(minCity == null || dist< minDist){					minCity = cities[i]					minDist = dist				}			}			return minCity		}	}}