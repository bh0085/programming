package actionscript{	import flash.display.Sprite	import flash.text.TextField	import flash.text.TextFormat	import flash.events.MouseEvent	import flash.display.BlendMode	public class Country extends GlooPlace{		public static var countries = new Array()				var places:Array = new Array()		var cities:Array = new Array()		var poly:Array		var infoSprite:Sprite		var cGFX:Sprite = new Sprite()				//draw parameters		var defaultFill = 0xFFFFFF		var defaultOutline = 0xDDDDDD		var defaultThick = 15				public function Country(nNew:String):void{			name = nNew			countries.push(this)			cGFX.addEventListener(MouseEvent.MOUSE_DOWN,cMouseClick)			cGFX.addEventListener(MouseEvent.MOUSE_OVER,cMouseOver)			cGFX.addEventListener(MouseEvent.MOUSE_OUT,cMouseExit)			mouseEnabled = false			type = "Country"		}		public static function resetFairs():void{			for( var i = 0 ; i < countries.length ; i++){				countries[i].resetFair()			}		}		override public function getAirports():Array{			var airports = new Array()			for(var i = 0 ; i < cities.length ; i++){				airports = airports.concat(cities[i].getAirports())			}			return airports		}					public function killCountry(id:Number):void{			countries.splice(id,1)		}		public function pushCity(cityName:String, population:Number,latLon:Array):void{			var city = new City(cityName)			cities.push(city)			city.setPopulation(population)			city.setLatLon(latLon)			places.push(city)			city.p = this		}		public function getID(countryName:String):Number{			for(var i = 0 ; i < countries.length ; i++){				if(countries[i].name == countryName){return i}			}			return -1		}		public function setPoly(p:Array):void{			poly = p		}		public function drawPoly(...args):void{			if(args.length>0){var drawOutline = args[0]} else {drawOutline = false}			if(args.length>1){var drawFill = args[1]} else {drawFill = false}			if(args.length>2){var thick = args[2]} else {thick = 5}			if(args.length>3){var outlineColor = args[3]} else {outlineColor = 0x444444}			if(args.length>4){var fillColor = args[4]} else {fillColor = 0xCCCCCC}			var s = new Sprite()			if(drawOutline){s.graphics.lineStyle(thick, outlineColor)}			if(drawFill){s.graphics.beginFill(fillColor)}			var ptXY = getXY([poly[poly.length-1][0],poly[poly.length- 1][1]])			s.graphics.moveTo(ptXY[0],ptXY[1])			for(var i = 1 ; i < poly.length ; i++){				ptXY = getXY(poly[i])				s.graphics.lineTo(ptXY[0],ptXY[1])			}			try{				cGFX.removeChildAt(0)			} catch (e:Error) {}			cGFX.addChild(s)			addChild(cGFX)					}		public function returnPoly(...args):Sprite{			if(args.length>0){var drawOutline = args[0]} else {drawOutline = false}			if(args.length>1){var drawFill = args[1]} else {drawFill = false}			if(args.length>2){var thick = args[2]} else {thick = 5}			if(args.length>3){var outlineColor = args[3]} else {outlineColor = 0x444444}			if(args.length>4){var fillColor = args[4]} else {fillColor = 0xCCCCCC}			if(poly== null){return null}			var s = new Sprite()			if(drawOutline){s.graphics.lineStyle(thick, outlineColor)}			if(drawFill){s.graphics.beginFill(fillColor)}			var ptXY = getXY([poly[poly.length-1][0],poly[poly.length- 1][1]])			s.graphics.moveTo(ptXY[0],ptXY[1])			for(var i = 0 ; i < poly.length ; i++){				ptXY = getXY(poly[i])				s.graphics.lineTo(ptXY[0],ptXY[1])			}			return(s)					}		public function genRandomPoly(radius:Number){			var ll = getLatLon()			var xOffs = ll[0]			var yOffs = ll[1]			var p = new Array()			for(var j = 0 ; j< 10 ; j++){				var angle = j * Math.PI * 2 / 10				var latLon = [xOffs+ Math.cos(angle) * (radius*(1 + Math.random()/3)), yOffs+ Math.sin(angle) * (radius*(1 + Math.random()/3))]				p.push(latLon)			}			setPoly(p)		}		override public function draw():Sprite{			var search = true			while(search){				try{cGFX.removeChildAt(0)} catch (e:Error) {search = false}			}						if(GloobalMain.colorationLevel == "Continent"){				var s = new Sprite()				s.graphics.lineStyle(defaultThick, defaultOutline)				var red = Math.round( p.minFare / Fares.maxFare * 256) * Math.pow(256,2)				var blue =Math.round(255 * ( 1-p.minFare/Fares.maxFare) )				s.graphics.beginFill(red + blue)				var ptXY = getXY([poly[poly.length-1][0],poly[poly.length- 1][1]])				s.graphics.moveTo(ptXY[0],ptXY[1])				for(var i = 1 ; i < poly.length ; i++){					ptXY = getXY(poly[i])					s.graphics.lineTo(ptXY[0],ptXY[1])					cGFX.addChild(s)				}			} else {if(GloobalMain.colorationLevel == "Country" || GloobalMain.colorationLevel == "City"){				var s = new Sprite()				s.graphics.lineStyle(defaultThick, defaultOutline)				var red = Math.round( minFare / Fares.maxFare * 255) * Math.pow(256,2)				var blue =Math.round(255 * ( 1- minFare/Fares.maxFare) )				s.graphics.beginFill(red + blue)				var ptXY = getXY([poly[poly.length-1][0],poly[poly.length- 1][1]])				s.graphics.moveTo(ptXY[0],ptXY[1])				for(var i = 0 ; i < poly.length ; i++){					ptXY = getXY(poly[i])					s.graphics.lineTo(ptXY[0],ptXY[1])					cGFX.addChild(s)				}								for(i = 0 ;  i < cities.length ; i++){					cGFX.addChild(cities[i].draw())				}			}}			return cGFX		}		public function drawCities():void{			for(var i = 0 ; i < cities.length; i++){				cities[i].drawCity()				addChild(cities[i])			}		}		public function cMouseOver(ev:MouseEvent):void{			GloobalMain.main.countryMouseOver(this)		}		public function cMouseExit(ev:MouseEvent):void{			GloobalMain.main.countryMouseExit(this)		}		public function cMouseClick(ev:MouseEvent):void{			GloobalMain.main.countryMouseClick(this,ev)		}	}}