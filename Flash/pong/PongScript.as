package pong{		import flash.events.KeyboardEvent	import flash.events.Event	import flash.events.MouseEvent	import flash.ui.Keyboard	import flash.display.MovieClip	import flash.display.Sprite	import flash.geom.Rectangle	import mygraphics.ObjObj	import flash.text.TextField		import flash.utils.getTimer		import pong.graphics.ComputerSymbol	import pong.graphics.HumanSymbol		public class PongScript extends MovieClip{				var paddle1:Paddle		var paddle2:Paddle		var paddle3:Paddle		var ball:Ball		var bounds:Rectangle		var ctrlButton:Sprite		var humanControl = false		var ballVelDisplay:TextField		var hs:HumanSymbol, cs:ComputerSymbol		var ballLimit1 = 20		var ballLimit2 = 30		var lastCollision = flash.utils.getTimer()		var lastHit = 0		var p3Out = false		var p3Timer = 0				public function PongScript(){						graphics.beginFill(0xCCCCFF)			graphics.lineStyle(5)			var margin = 5			bounds = new Rectangle(margin,margin, 1000 - margin * 2,500 - margin * 2)			graphics.drawRect(bounds.x, bounds.y, bounds.width, bounds.height)						 paddle1 = new Paddle()			 paddle2 = new Paddle()			 paddle2.speedMultiplier = .2			 paddle2.flip()			 paddle3 = new Paddle()			 paddle3.fixedX = false			 ball = new Ball()						 addChild(paddle1)			 addChild(paddle2)			 addChild(ball)			 			 ctrlButton = new Sprite()			 ctrlButton.x = 50			 ctrlButton.y = 50			 ctrlButton.graphics.beginFill(0xCCCCFF,.3)			 ctrlButton.graphics.lineStyle(5,0x000000)			 ctrlButton.graphics.drawCircle(0,0,25)			 ctrlButton.addEventListener(MouseEvent.MOUSE_DOWN,ctrlEvent)			 hs = new HumanSymbol()			 hs.x = -15			 hs.y = -20			 cs = new ComputerSymbol()			 cs.x = -20			 cs.y = -25			 cs.scaleX = .9			 cs.scaleY = .9			 ctrlButton.addChild(hs)			 ctrlButton.addChild(cs)			 cs.visible = false			 			 addChild(ctrlButton)			 			 ballVelDisplay = new TextField()			 ballVelDisplay.x = 150			 ballVelDisplay.y = 25			// addChild(ballVelDisplay)			 			 			 paddle1.y = bounds.y + bounds.height / 2			 paddle1.x = bounds.x +  45			 paddle1.defaultX = bounds.x + 45			 paddle2.y = bounds.y + bounds.height / 2			 paddle2.x = bounds.x + bounds.width -  45			 paddle2.defaultX = bounds.x + bounds.width -  45			 ball.x = bounds.x + bounds.width/2			 ball.y = bounds.y + bounds.height / 2			 ball.vx = -8			 ball.vy = 2						stage.addEventListener(KeyboardEvent.KEY_DOWN,keyPress)			stage.addEventListener(KeyboardEvent.KEY_UP,keyUp)			stage.addEventListener(Event.ENTER_FRAME,pNextFrame)		}				function ctrlEvent( e:MouseEvent ){			humanControl = !humanControl			if(humanControl){cs.visible = true; hs.visible = false} else {hs.visible = true ; cs.visible = false}		}				function keyPress( e: KeyboardEvent){					if(e.ctrlKey){				if(e.keyCode == Keyboard.UP){paddle1.paddleStretchLeft()}				if(e.keyCode == Keyboard.DOWN){paddle1.paddleStretchRight()}			} else {				if(e.keyCode == Keyboard.LEFT){paddle1.twistCCW()}				if(e.keyCode == Keyboard.RIGHT){paddle1.twistCW()}				if(e.keyCode == Keyboard.UP){paddle1.moveUp()}				if(e.keyCode == Keyboard.DOWN){paddle1.moveDown()}				if(e.keyCode == Keyboard.SPACE){paddle1.returnHome()}			}			if(e.keyCode == Keyboard.SHIFT){paddle1.setSpring()}		}				function keyUp( e: KeyboardEvent){			if(e.keyCode == Keyboard.SHIFT){paddle1.releaseSpring()}		}		function pNextFrame( e: Event){			for (var i = 0; i < 3 ; i++){				if( i == 0 ){var paddle = paddle1} else{ if(i ==1) {paddle = paddle2} else {paddle = paddle3}}				var int = ObjObj.findIntersect(paddle.paddleShape,ball,this)				if(int != null){					if(int.width != 0){						var ballRel = [ball.transform.concatenatedMatrix.tx - paddle.targetingCircle.transform.concatenatedMatrix.tx,ball.transform.concatenatedMatrix.ty - paddle.targetingCircle.transform.concatenatedMatrix.ty]						var ballRMag = Math.sqrt(Math.pow(ballRel[0],2) + Math.pow(ballRel[1],2))						var ballRUnit = [ballRel[0] / ballRMag, ballRel[1] / ballRMag]						var ballRUnitPerp = [-1 * ballRUnit[1],  ballRUnit[0]]						var paddleVel = paddle.paddleVelocity(ball)						var ballVel = [ball.vx - paddleVel[0], ball.vy- paddleVel[1]]						var ballVIn = ( ballVel[0] * ballRUnit[0] + ballVel[1] * ballRUnit[1])						if((paddle.flipped && ballVel[0] >0 ) || (!paddle.flipped &&ballVel[0] <0)){							var ballRV  = [-1* ( ballVel[0] * ballRUnit[0] + ballVel[1] * ballRUnit[1]),  (ballVel[0] *ballRUnitPerp[0] + ballVel[1] * ballRUnitPerp[1]) ]							var ballVNew= [ballRV[0] * ballRUnit[0] + ballRV[1] * ballRUnitPerp[0], ballRV[0] * ballRUnit[1] + ballRV[1] * ballRUnitPerp[1]]							ball.vx = ballVNew[0] + paddleVel[0]							ball.vy = ballVNew[1] + paddleVel[1]							lastCollision = flash.utils.getTimer()							if(i == 0 || i == 1){lastHit = i} else{ lastHit = 1 - lastHit }													}					}				}			}						var deltaT = flash.utils.getTimer() - lastCollision			if( (deltaT > 1000) && (ball.x > bounds.x +bounds.width*3/8) && (ball.x <bounds.x + bounds.width*5/8)){				paddle3.x = ball.x				paddle3.y = bounds.y + bounds.height / 2								if(lastHit == 0){					paddle3.x += 40					paddle3.flip()				} else {					paddle3.x -= 40					paddle3.unflip()				}				addChild(paddle3)				p3Out = true				p3Timer = 0						}			if(p3Out){				paddle3.y = ball.y				lastCollision = flash.utils.getTimer()				p3Timer ++				var opMag = (15 -Math.abs(p3Timer - 15))/15				paddle3.omega = opMag * 20				paddle.alpha = opMag				if(p3Timer > 30){					p3Out = false					removeChild(paddle3)									}			}						if(ball.x < bounds.x){				ball.x += bounds.x - ball.x				ball.vx *= -1						}			if(ball.y < bounds.y){				ball.y += bounds.y - ball.y				ball.vy *= -1			}			if(ball.x > bounds.right ){				ball.x += bounds.right - ball.x				ball.vx *= -1			}			if(ball.y > bounds.bottom){				ball.y += bounds.bottom - ball.y				ball.vy *= -1			}						var magV = Math.sqrt(Math.pow(ball.vx,2) + Math.pow(ball.vy, 2))			if(magV > ballLimit1){				ball.vx *=.99				ball.vy *=.99			}			if(magV > ballLimit2){				ball.vx*= .95				ball.vy*= .95			}			ball.x += ball.vx			ball.y += ball.vy			if(ball.y <paddle2.y+15){paddle2.moveUp()}			if(ball.y > paddle2.y-15){paddle2.moveDown()}			if(!humanControl){				if(ball.y <paddle1.y+15){paddle1.moveUp()}				if(ball.y > paddle1.y-15){paddle1.moveDown()}						}			ballVelDisplay.text = "Ball Speed:    "			ballVelDisplay.appendText(String(Math.round(magV)))		}	}}