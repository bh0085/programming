package actionscript{	import flash.display.Sprite	import flash.events.MouseEvent	import flash.events.KeyboardEvent	import flash.ui.Keyboard	import flash.text.TextField	import flash.text.TextFormat	import flash.display.Shape	public class CME extends Sprite{		var slides = new Array()		var cmeName:String		var comments = new Array()		var main:CME_main		var lastSlide:CME_slide		var slideNumber:Number		var cDisplay:Sprite		var nextSlide:Sprite		var prevSlide:Sprite		var slideWin:Sprite		var medicineList:Array						var ratingsWinSelectionIndicator		var ratingsButtonsWin:Sprite		var rBoxSize = 40		var rWin:Sprite		var ratingOverlay:Sprite		var ratingOParent:Sprite		var ratings:Array		var displayedComments:Array		var commentInvestigator:Sprite		public function setMedicineList(list:Array):void{					}				public function CME(n:String,cme_main:CME_main):void{			cmeName = n			main = cme_main						main.stage.addEventListener(KeyboardEvent.KEY_DOWN,keyDown)						slideWin = new Sprite()			addChild(slideWin)						nextSlide = new Sprite()			prevSlide = new Sprite()			prevSlide.graphics.lineStyle(0,CME_main.outlineColor)			prevSlide.graphics.beginFill(CME_main.buttonFillColor)			prevSlide.graphics.drawRect(0,0,20,20)			var prevUnclicked = new Shape()			prevUnclicked.graphics.beginFill(CME_main.buttonGraphicColor)			prevUnclicked.graphics.moveTo(2,2)			prevUnclicked.graphics.lineTo(2,18)			prevUnclicked.graphics.lineTo(18,18)						var prevClicked = new Shape()			prevClicked.graphics.beginFill(0xFFFFFF)			prevClicked.graphics.moveTo(2,2)			prevClicked.graphics.lineTo(2,18)			prevClicked.graphics.lineTo(18,18)			prevClicked.visible = false			prevSlide.addChild(prevUnclicked)			prevSlide.addChild(prevClicked)			nextSlide = new Sprite()			nextSlide.graphics.lineStyle(0,CME_main.outlineColor)			nextSlide.graphics.beginFill(CME_main.buttonFillColor)			nextSlide.graphics.drawRect(0,0,20,20)			var nextUnclicked = new Shape()			nextUnclicked.graphics.beginFill(CME_main.buttonGraphicColor)			nextUnclicked.graphics.moveTo(2,2)			nextUnclicked.graphics.lineTo(18,2)			nextUnclicked.graphics.lineTo(18,18)						var nextClicked = new Shape()			nextClicked.graphics.beginFill(0xFFFFFF)			nextClicked.graphics.moveTo(2,2)			nextClicked.graphics.lineTo(18,2)			nextClicked.graphics.lineTo(18,18)			nextClicked.visible = false			nextSlide.addChild(nextUnclicked)			nextSlide.addChild(nextClicked)									nextSlide.x = 24			nextSlide.y = CME_slide.slideDefaultHeight - 22						prevSlide.x = 2			prevSlide.y = CME_slide.slideDefaultHeight - 22			addChild(nextSlide)			addChild(prevSlide)			nextSlide.addEventListener(MouseEvent.MOUSE_DOWN,nextClickedFunc)			prevSlide.addEventListener(MouseEvent.MOUSE_DOWN,prevClickedFunc)											}				public function showRatingWindow(t:String):void{					var tF= new TextField()			tF.multiline = true			tF.wordWrap = true			var format = new TextFormat("Optima",20)			format.align = "center"			tF.defaultTextFormat = format			tF.text = t			var w0 = 400			tF.width = w0			rWin = new Sprite()			var h0 = 75 + tF.numLines * 7.5			rWin.graphics.beginFill(CME_main.popupBGColor)			rWin.graphics.lineStyle(0,0x666666)			rWin.graphics.drawRect(0,0,w0,h0)						rWin.addChild(tF)			ratingsButtonsWin = new Sprite()			var ratingsButtons = new Array()			var offset=0			var boxSize = rWin.width/12			rBoxSize = boxSize			ratingsWinSelectionIndicator = new Shape()			ratingsWinSelectionIndicator.graphics.lineStyle(0)			ratingsWinSelectionIndicator.graphics.drawRect(0,0,boxSize - 4,boxSize -4)			ratingsButtonsWin.y =h0 - boxSize * 3/2			ratingsButtonsWin.x = boxSize/2			for(var i = 0; i <2 ;  i++){				var s = new Sprite()				s.x = offset				s.y = 0				s.graphics.beginFill(CME_main.textBGColor)				s.graphics.lineStyle(0,CME_main.internalOutlineColor)				s.graphics.drawRect(0,0,boxSize-4,boxSize-4)				var sT = new TextField				var format = new TextFormat("Optima",boxSize - 5)				format.align = "center"				sT.y = -2				sT.defaultTextFormat = format				sT.height = boxSize				sT.width = boxSize				sT.text = String(2*i - 1)				sT.selectable = false				s.addChild(sT)				s.addEventListener(MouseEvent.MOUSE_MOVE,ratingsOver)				s.addEventListener(MouseEvent.MOUSE_DOWN,ratingsClick)				main.addEventListener(MouseEvent.MOUSE_DOWN,ratingsClickElsewhere)				offset += boxSize				ratingsButtons.push(s)				ratingsButtonsWin.addChild(s)			}			ratingsButtonsWin.addChild(ratingsWinSelectionIndicator)			rWin.addChild(ratingsButtonsWin)			main.addChild(rWin)					rWin.x = width /2 - w0 /2			rWin.y = 150			rWin.alpha = .5		}		public function ratingsOver(ev:MouseEvent){						var boxSelected = Math.min(10, Math.floor((ev.stageX - ratingsButtonsWin.transform.concatenatedMatrix.tx) /rBoxSize ))			boxSelected = Math.max(0,boxSelected) 			var targetX = ratingsButtonsWin.getChildAt(boxSelected).x			ratingsWinSelectionIndicator.x = (targetX)		}				public function ratingsClick(ev:MouseEvent){						var boxSelected = Math.min(10, Math.floor((ev.stageX - ratingsButtonsWin.transform.concatenatedMatrix.tx) /rBoxSize ))			boxSelected = Math.max(0,boxSelected) 			var rating = 2*boxSelected - 1			setBias(rating)			main.removeChild(rWin)			main.removeEventListener(MouseEvent.MOUSE_DOWN,ratingsClickElsewhere)			refresh()					}				public function ratingsClickElsewhere(ev:MouseEvent){			var rating = 0			setBias(rating)			main.removeChild(rWin)			main.removeEventListener(MouseEvent.MOUSE_DOWN,ratingsClickElsewhere)			refresh()					}		public function setBias(n:Number):void{			var idx = comments.length - 1			var comment = comments[idx]			comment.bias = n		}				public function keyDown(ev:KeyboardEvent):void{			if(ev.keyCode == Keyboard.ENTER){				var text = slides[slideNumber].getSelectedText()				var sStart = slides[slideNumber].getSelectionStart()				showRatingWindow(text)				var sentence = slides[slideNumber].getSelectedSentence()				if(text.length != 0){					var comment = new Comment(slideNumber,sentence,text,slides[slideNumber].textBox.text,sStart)					comments.push(comment)				}				refresh()			}		}		public function prevClickedFunc(ev:MouseEvent):void{			var target = slideNumber - 1			if(target >=0){				display(target)			}		}		public function nextClickedFunc(ev:MouseEvent):void{			var target = slideNumber + 1			if(target <slides.length){				display(target)			}					}		public function addSlide(slide:CME_slide){			slides.push(slide)		}		public function display(...args){			if(args.length == 0){var sNum = 0} else {sNum = args[0]}			slideNumber = sNum			refresh()													}		public function refresh():void{			var slide = slides[slideNumber]			if(lastSlide != null){				slideWin.removeChild(lastSlide)				}			slideWin.addChild(slide)			lastSlide = slide						if(cDisplay != null){				removeChild(cDisplay)			}			cDisplay = new Sprite()			var cDHeight = 0			var cDWidth = 500			var cLMargin = 3			var cLittleWidth = cDWidth - cLMargin * 2			var cLittleHeight = 30 - cLMargin *2			var cWin = new Sprite()			displayedComments = new Array()					for(var i = 0 ; i < comments.length; i++){				if(comments[i].slideID == slideNumber){					var cLittle = new Sprite()					var t = new TextField()					cLittle.graphics.beginFill(CME_main.textBGColor)					cLittle.addChild(t)					cLittle.graphics.lineStyle(0,CME_main.outlineColor)					cLittle.y = cDHeight															t.defaultTextFormat = new TextFormat("Optima")					t.y = 2					t.x = 2					t.width = cDWidth - 20					t.wordWrap = true					var f2 = new TextFormat("Optima",20,0x000000,true)					t.text = comments[i].bias					//t.appendText(comments[i].sentenceID)					t.appendText(":    ")					t.appendText(comments[i].excerpt)					t.height = t.numLines * 25					t.setTextFormat( f2,0,3 )										//trace(t.height)					cLittleHeight = t.height					cLittle.graphics.drawRect(cLMargin,cLMargin,cLittleWidth,cLittleHeight)										cDHeight += cLittleHeight + cLMargin * 2					cWin.addChild(cLittle)					displayedComments.push(comments[i])					cLittle.addEventListener(MouseEvent.MOUSE_OVER,commentMouseOver)					cLittle.addEventListener(MouseEvent.MOUSE_DOWN,commentMouseOut)									}			}			var cDBG = new Sprite()			cDBG.graphics.lineStyle(0,0xCCCCCC)			cDBG.graphics.beginFill(0xEEEEEE)			cDBG.graphics.drawRect(0,0,cDWidth,cDHeight )			cDisplay.addChild(cDBG)			cDisplay.addChild(cWin)			addChild(cDisplay)						cDisplay.y = CME_slide.slideDefaultHeight + 2					}		public function commentMouseOver(ev:MouseEvent):void{			var obj = ev.currentTarget as Sprite			var idx = obj.parent.getChildIndex(obj)			displayCommentInvestigator(displayedComments[idx])		}						public function commentMouseOut(ev:MouseEvent):void{									}		public function displayCommentInvestigator(c:Comment):void{			hideCommentInvestigator()			commentInvestigator = new Sprite()			var cBG = new Sprite()			cBG.graphics.beginFill(CME_main.textBGColor)			cBG.graphics.lineStyle(0,CME_main.internalOutlineColor)			cBG.graphics.drawRect(0,0,cDisplay.width ,cDisplay.height)			cBG.alpha = .5						var cText = new TextField()			var count = slides[slideNumber].numSentences(c.excerpt)			cText.text = slides[slideNumber].printSentence(c.sentenceID,count)			var beginning = slides[slideNumber].sentenceStart(c.sentenceID)			cText.width = cBG.width			cText.wordWrap = true			var eStart = c.exerptIDX			var cEnd = c.exerptIDX + c.excerpt.length			var f = new TextFormat("Optima",12,0x00000)			var fhighlight = new TextFormat("Optima",12,0xFF0000)			cText.setTextFormat(f)			cText.setTextFormat(fhighlight,eStart - beginning, cEnd -1 - beginning)			commentInvestigator.addChild(cBG)			commentInvestigator.addChild(cText)			commentInvestigator.y = cDisplay.getBounds(main).bottom						addChild(commentInvestigator)					}		public function hideCommentInvestigator():void{			if(commentInvestigator != null){			removeChild(commentInvestigator)			}		}	}}